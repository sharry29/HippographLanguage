int main() {
    graph<string:int, int> g = ["S":500 -(10)> "A":500 -(2)> "C":500 -(-2)> "B" -(1)> "A"; "S" -(8)>"E":500 -(1)> "D":500 -(-1)>"C"; "D"-(-4)>"A"];

    graph<string:int, int> shortest_paths = [];
    bool valid = true;

    for_node(n : g) {
        node<string:int> n1 = n.get_name():999999;
        shortest_paths.set_node(n1);
    }

    for_node(n : shortest_paths) {
        for_edge(src, dst, w : g) {
            int src_data = src.get_data();
            int dst_data = dst.get_data();
            if (src_data + w < dst_data) {
                dst.set_data(src_data + w);
                shortest_paths.set_node(dst);
                shortest_paths.set_edge(src.get_name(); dst.get_name(); 0);
            }
        }
    }

    for_edge(src, dst, w : g) {
        int src_data = src.get_data();
        int dst_data = dst.get_data();
        if (src_data + w < dst_data) {
            print("negative edge weight cycle");
            valid = false;
        }
    }

    if (valid) {
        shortest_paths.print();
    }

    return 0;
}
